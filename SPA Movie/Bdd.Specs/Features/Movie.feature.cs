// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bdd.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MovieFeature : object, Xunit.IClassFixture<MovieFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Movie.feature"
#line hidden
        
        public MovieFeature(MovieFeature.FixtureData fixtureData, Bdd_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "movie", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Adding an movie")]
        [Xunit.TraitAttribute("FeatureTitle", "movie")]
        [Xunit.TraitAttribute("Description", "Adding an movie")]
        [Xunit.TraitAttribute("Category", "addmovie")]
        [Xunit.InlineDataAttribute("{\"name\": \"Bahubali\",\"yearOfRelease\": 2021,\"plot\": \"Bahubali_plot\",\"actorIds\": [1," +
            "2],\"genreIds\": [3,4],\"producedBy\": 1,\"coverImage\": \"bahubaliPoster\"}", "movies/AddMovie", "201", "1", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": \"\",\"yearOfRelease\": 2021,\"plot\": \"Bahubali_plot\",\"actorIds\": [1,2],\"genr" +
            "eIds\": [3,6],\"producedBy\": 1,\"coverImage\": \"bahubaliPoster\"}", "movies/AddMovie", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": \"Bahubali\",\"yearOfRelease\":201 ,\"plot\": \"Bahubali_plot\",\"actorIds\": [1,2" +
            "],\"genreIds\": [3,6],\"producedBy\": 1,\"coverImage\": \"bahubaliPoster\"}", "movies/AddMovie", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": \"Bahubali\",\"yearOfRelease\": 2021,\"plot\": \"Bahubali_plot\",\"actorIds\": [4," +
            "5],\"genreIds\": [1,2],\"producedBy\": 1,\"coverImage\": \"bahubaliPoster\"}", "movies/AddMovie", "400", "Actorids/generids cannot be found , enter valid data", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": \"Bahubali\",\"yearOfRelease\": 2021,\"plot\": \"Bahubali_plot\",\"actorIds\": [1," +
            "2],\"genreIds\": [4,5],\"producedBy\": 1,\"coverImage\": \"bahubaliPoster\"}", "movies/AddMovie", "400", "Actorids/generids cannot be found , enter valid data", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": \"Bahubali\",\"yearOfRelease\": 2021,\"plot\": \"Bahubali_plot\",\"actorIds\": [1," +
            "2],\"genreIds\": [1,2],\"producedBy\": 1,\"coverImage\":\"\"}", "movies/AddMovie", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": \"Bahubali\",\"yearOfRelease\": 2021,\"plot\": \"Bahubali_plot\",\"actorIds\": [1," +
            "2],\"genreIds\": [3,4],\"producedBy\": 5,\"coverImage\": \"bahubaliPoster\"}", "movies/AddMovie", "400", "Producer id couldn\'t be found", new string[0])]
        public virtual void AddingAnMovie(string data, string resourceEndpoint, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "addmovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Data", data);
            argumentsOfScenario.Add("resourceEndpoint", resourceEndpoint);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding an movie", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
    testRunner.When(string.Format("I am making a post request to \'{0}\' with the following Data \'{1}\'", resourceEndpoint, data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
    testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
    testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Display the list of movies")]
        [Xunit.TraitAttribute("FeatureTitle", "movie")]
        [Xunit.TraitAttribute("Description", "Display the list of movies")]
        [Xunit.TraitAttribute("Category", "displaymovies")]
        [Xunit.InlineDataAttribute("movies/GetAllmovies", "200", @"[{""id"":1,""name"":""KGFChap2"",""yearOfRelease"":2022,""plot"":""KGFPlot"",""actors"":[""Yash"",""Shrinidhi""],""genres"":[""Comedy"",""Thriller""],""producers"":""Priyanka"",""coverImage"":""KGFChap2CoverPage""},{""id"":2,""name"":""Kantara"",""yearOfRelease"":2022,""plot"":""KantaraPlot"",""actors"":[""Ramacharan"",""Vinay""],""genres"":[""Adventure"",""Action""],""producers"":""Shobu"",""coverImage"":""KantaraCoverPage""}]", new string[0])]
        public virtual void DisplayTheListOfMovies(string resourceEndpoint, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "displaymovies"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resourceEndpoint", resourceEndpoint);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display the list of movies", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
         testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
         testRunner.When(string.Format("I make GET Request \'{0}\'", resourceEndpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
         testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
         testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Display the movie by using id")]
        [Xunit.TraitAttribute("FeatureTitle", "movie")]
        [Xunit.TraitAttribute("Description", "Display the movie by using id")]
        [Xunit.TraitAttribute("Category", "displaymovie")]
        [Xunit.InlineDataAttribute("movies/GetMoviesById/1", "200", "{\"id\":1,\"name\":\"KGFChap2\",\"yearOfRelease\":2022,\"plot\":\"KGFPlot\",\"actors\":[\"Yash\"," +
            "\"Shrinidhi\"],\"genres\":[\"Comedy\",\"Thriller\"],\"producers\":\"Priyanka\",\"coverImage\":" +
            "\"KGFChap2CoverPage\"}", new string[0])]
        [Xunit.InlineDataAttribute("movies/GetMoviesById/100", "404", "No Content Found", new string[0])]
        [Xunit.InlineDataAttribute("movies/GetMoviesById/-1", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("movies/GetMoviesById/0", "400", "invalid Arguments", new string[0])]
        public virtual void DisplayTheMovieByUsingId(string resourceEndpoint, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "displaymovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resourceEndpoint", resourceEndpoint);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display the movie by using id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
         testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
         testRunner.When(string.Format("I make GET Request using Id \'{0}\'", resourceEndpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
         testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
         testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete the movie using id")]
        [Xunit.TraitAttribute("FeatureTitle", "movie")]
        [Xunit.TraitAttribute("Description", "Delete the movie using id")]
        [Xunit.TraitAttribute("Category", "deletemovie")]
        [Xunit.InlineDataAttribute("movies/DeleteMovie/1", "200", "deleted successfully", new string[0])]
        [Xunit.InlineDataAttribute("movies/DeleteMovie/-1", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("movies/DeleteMovie/0", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("movies/DeleteMovie/100", "404", "No Content Found", new string[0])]
        public virtual void DeleteTheMovieUsingId(string resourceEndpoint, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "deletemovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resourceEndpoint", resourceEndpoint);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete the movie using id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
         testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
         testRunner.When(string.Format("I make Delete Request \'{0}\'", resourceEndpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
         testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
         testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="update the movie using id")]
        [Xunit.TraitAttribute("FeatureTitle", "movie")]
        [Xunit.TraitAttribute("Description", "update the movie using id")]
        [Xunit.TraitAttribute("Category", "updatemovie")]
        [Xunit.InlineDataAttribute("{\"name\":\"Bahubali\",\"yearOfRelease\":2021,\"plot\":\"Bahubali_plot\",\"actorIds\":[1,2],\"" +
            "genreIds\":[3,4],\"producedBy\":1,\"coverImage\":\"bahubaliPoster\"}", "movies/UpdateMovie/1", "200", "updated successfully", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Bahubali\",\"yearOfRelease\":20,\"plot\":\"Bahubali_plot\",\"actorIds\": [1,2],\"g" +
            "enreIds\": [3,4],\"producedBy\": 1,\"coverImage\": \"bahubaliPoster\"}", "movies/UpdateMovie/1", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"\",\"yearOfRelease\": 2021,\"plot\":\"bahubali_plot\",\"actorIds\": [1,2],\"genreI" +
            "ds\": [3,4],\"producedBy\": 1,\"coverImage\": \"bahubaliPoster\"}", "movies/UpdateMovie/1", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Bahubali\",\"yearOfRelease\":2021,\"plot\":\"Bahubali_plot\",\"actorIds\": [1,5]," +
            "\"genreIds\": [3,4],\"producedBy\": 1,\"coverImage\": \"bahubaliPoster\"}", "movies/UpdateMovie/1", "400", "Actorids/generids cannot be found , enter valid data", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Bahubali\",\"yearOfRelease\":2021,\"plot\":\"Bahubali_plot\",\"actorIds\": [1,2]," +
            "\"genreIds\": [3,6],\"producedBy\": 1,\"coverImage\": \"bahubaliposter\"}", "movies/UpdateMovie/1", "400", "Actorids/generids cannot be found , enter valid data", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Bahubali\",\"yearOfRelease\":2021,\"plot\":\"Bahubali_plot\",\"actorIds\": [1,2]," +
            "\"genreIds\": [3,4],\"producedBy\": 6,\"coverImage\": \"bahubaliposter\"}", "movies/UpdateMovie/1", "400", "Producer id couldn\'t be found", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Bahubali\",\"yearOfRelease\":2021,\"plot\":\"Bahubali_plot\",\"actorIds\":[1,2],\"" +
            "genreIds\":[3,4],\"producedBy\":1,\"coverImage\":\"bahubaliPoster\"}", "movies/UpdateMovie/-1", "400", "invalid Arguments", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\":\"Bahubali\",\"yearOfRelease\":2021,\"plot\":\"Bahubali_plot\",\"actorIds\":[1,2],\"" +
            "genreIds\":[3,4],\"producedBy\":1,\"coverImage\":\"bahubaliPoster\"}", "movies/UpdateMovie/100", "404", "No Content Found", new string[0])]
        public virtual void UpdateTheMovieUsingId(string data, string resourceEndpoint, string statusCode, string responseData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "updatemovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Data", data);
            argumentsOfScenario.Add("resourceEndpoint", resourceEndpoint);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("responseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("update the movie using id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 61
          testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
          testRunner.When(string.Format("I make PUT Request \'{0}\' with the following Data with the following Data \'{1}\'", resourceEndpoint, data), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
          testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
          testRunner.And(string.Format("response data must look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MovieFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MovieFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
